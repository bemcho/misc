;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(calc-alg-entry-history calc-extended-command-history input-method-history file-name-history slime-minibuffer-history common-lisp-hyperspec-history command-history irony--server-install-command-history buffer-name-history minibuffer-history helm-M-x-input-history))
(setq calc-alg-entry-history '("23" "21" "a^2 +b^2 =c^2" "2" "b=23" "a=12"))
(setq calc-extended-command-history '("calc"))
(setq file-name-history '("~/.spacemacs" "~/Projects/opencv-master/modules/dnn/src/layers/convolution_layer.cpp" "~/Projects/LispWorld/cl-kafka/src/cl-kafka.lisp" "~/Projects/LispWorld/cl-librdkafka/librdkafka-clos.lisp" "~/Projects/LispWorld/cl-librdkafka/librdkafka_wrap.so" "~/Projects/LispWorld/cl-librdkafka/.gitignore" "~/Projects/LispWorld/learn-you-some-lisp/src/chapter03.lisp" "~/Projects/LispWorld/cl-librdkafka/cl-librdkafka.lisp" "~/Projects/LispWorld/cl-librdkafka/cl-librdkafka.asd" "~/Projects/LispWorld/cl-librdkafka/cl-librdkafka-clos.lisp" "~/quicklisp/local-projects/clml/hjs/clml.hjs.asd" "~/quicklisp/local-projects/clml/package.lisp" "~/quicklisp/local-projects/clml/clml.asd" "~/Projects/LispWorld/learn-you-some-lisp/src/chapter02.lisp" "~/Projects/LispWorld/learn-you-some-lisp/src/chapter01.lisp" "~/Projects/LispWorld/learn-you-some-lisp/learn-you-some-lisp.asd" "~/vtk.txt" "~/startemacs.sh" "~/examples.desktop" "~/Projects/LispWorld/learn-you-some-lisp/src/package.lisp" "~/Projects/LispWorld/learn-you-some-lisp/src/learn-you-some-lisp.lisp" "~/Books/Lisp/Chap01/Anagrams.lhs" "~/Projects/LispWorld/lisp-koans/koans/evaluation.lsp" "~/.emacs.d/init.el" "~/.sbclrc" "~/Projects/LispWorld/learn-you-some-lisp/README.txt" "~/Projects/LispWorld/learn-you-some-lisp/package.lisp" "~/Projects/elixir-koans/lib/koans/16_tasks.ex" "~/Projects/elixir-koans/lib/koans/11_structs.ex" "~/Projects/elixir-koans/lib/koans/08_keyword_lists.ex" "~/Projects/elixir-koans/lib/koans/02_strings.ex" "~/Projects/LispWorld/lisp-koans/unused-test-ideas.lsp" "~/Projects/HaskellProjects/KafkaConsumerProducerTool/src/Data/Kafka/KafkaProducer.hs" "~/Projects/HaskellProjects/KafkaConsumerProducerTool/src/Data/Kafka/KafkaConsumer.hs" "~/Projects/LispWorld/lisp-koans/koans/variables-parameters-constants.lsp" "~/Projects/LispWorld/lisp-koans/koans/triangle-project.lsp" "~/Projects/LispWorld/lisp-koans/koans/strings.lsp" "~/Projects/LispWorld/lisp-koans/contemplate.lsp" "~/Projects/LispWorld/lisp-koans/lisp-unit.lsp" "~/Projects/caffe/build/CMakeFiles/hdf5/cmake_hdf5_test.c" "~/Projects/actor-framework/libcaf_openssl/src/manager.cpp" "~/.emacs.d/vlf/vlf-base.el" "~/Projects/LispWorld/lisp-koans/koans/threads.lsp" "~/Projects/LispWorld/lisp-koans/koans/scope-and-extent.lsp" "~/Projects/LispWorld/lisp-koans/koans/special-forms.lsp" "~/Projects/LispWorld/lisp-koans/koans/hash-tables.lsp" "~/Projects/LispWorld/lisp-koans/koans/loops.lsp" "~/Projects/LispWorld/lisp-koans/koans/asserts.lsp" "~/Projects/LispWorld/lisp-koans/koans/extra-credit.lsp" "~/Projects/LispWorld/lisp-koans/koans/format.lsp" "~/Projects/LispWorld/lisp-koans/koans/mapcar-and-reduce.lsp" "~/Projects/LispWorld/lisp-koans/koans/scoring-project.lsp" "~/Projects/LispWorld/lisp-koans/koans/lists.lsp" "~/Projects/LispWorld/lisp-koans/koans/arrays.lsp" "~/Projects/LispWorld/lisp-koans/koans/equality-distinctions.lsp" "~/.emacs.d/CHANGELOG.org" "~/Projects/LispWorld/lisp-koans/.gitignore" "~/Projects/LispWorld/lisp-koans/koans/iteration.lsp" "~/Projects/LispWorld/lisp-koans/koans/functions.lsp" "~/Projects/LispWorld/lisp-koans/koans/nil-false-empty.lsp" "~/Projects/LispWorld/lisp-koans/koans/multiple-values.lsp" "~/Projects/LispWorld/lisp-koans/koans/control-statements.lsp" "~/.emacs.d/.cache/layouts/persp-auto-save" "~/.emacs.d/elpa/slime-docker-20171004.1151/slime-docker-autoloads.el" "~/.emacs.d/elpa/docker-tramp-20170206.1925/docker-tramp-autoloads.el" "~/.emacs.d/elpa/org-plus-contrib-20171205/org-loaddefs.el" "~/Downloads/install_juliapro.sh" "~/Projects/actor-framework/examples/composition/dictionary_behavior.cpp" "~/Projects/3d-scanner/source/main.cpp" "~/.emacs.d/private/bemcho/README.org" "~/.emacs.d/private/bemcho/packages.el"))
(setq slime-minibuffer-history '("defanonenum" "t)" "http://localhost"))
(setq common-lisp-hyperspec-history '("#:babel"))
(setq command-history '((package-install 'cuda-mode nil) (helm-M-x nil "package-install") (menu-bar-mode 'toggle) (helm-M-x nil "menu-bar-mode") (menu-bar-mode 'toggle) (helm-M-x nil #("menu-bar-mode" 0 13 (match-part "menu-bar-mode"))) (menu-bar-showhide-tool-bar-menu-customize-enable-top) (helm-M-x nil "menu-bar-showhide-tool-bar-menu-customize-enable-top") (helm-M-x nil #("package-delete" 0 14 (match-part "package-delete"))) (ada-mode-version) (helm-M-x nil "ada-mode-version") (package-install 'alda-mode nil) (helm-M-x nil "package-install") (package-delete [cl-struct-package-desc alda-mode (20171103 1548) "An Alda major mode" ((emacs (24 0))) nil nil "/home/bemcho/.emacs.d/elpa/alda-mode-20171103.1548" ((:keywords "alda" "highlight") (:url . "http://github.com/jgkamat/alda-mode") (:commit . "ea0d3a25ca2b45d08c510ad55b3d8a5374b2ec43")) nil] nil nil) (helm-M-x nil "package-delete") (ada-mode) (helm-M-x nil "ada-mode") (package-reinstall 'ada) (helm-M-x nil #("package-reinstall" 0 17 (match-part "package-reinstall"))) (ada-mode-version) (helm-M-x nil "ada-mode-version") (package-install 'alda-mode nil) (helm-M-x nil "package-install") (ada-mode) (helm-M-x nil "ada-mode") (ada-mode) (helm-M-x nil "ada-mode") (ada-mode-version) (helm-M-x nil "ada-mode-version") (menu-bar-mode 'toggle) (helm-M-x nil "menu-bar-mode") (ada-mode) (helm-M-x nil "ada-mode") (kill-some-buffers) (helm-M-x nil "kill-some-buffers") (slime) (helm-M-x nil #("slime" 0 5 (match-part "slime"))) (eval-buffer) (helm-M-x nil #("eval-buffer" 0 11 (match-part "eval-buffer"))) (eval-buffer) (helm-M-x nil #("eval-buffer" 0 11 (match-part "eval-buffer"))) (speedbar nil) (helm-M-x nil #("speedbar" 0 8 (match-part "speedbar"))) (slime) (helm-M-x nil "slime") (kill-buffer " *helm candidates:Emacs Commands*") (kill-some-buffers) (helm-M-x nil "kill-some-buffers") (slime-restart-inferior-lisp) (helm-M-x nil "slime-restart-inferior-lisp") (slime-repl-set-package "CL-LIBRDKAFKA") (slime-restart-inferior-lisp) (helm-M-x nil "slime-restart-inferior-lisp") (slime-restart-inferior-lisp) (helm-M-x nil "slime-restart-inferior-lisp") (slime) (helm-M-x nil "slime") (kill-buffer "host-alieneval.lisp") (kill-buffer "functions.lisp") (kill-buffer "enum.lisp") (kill-buffer "defboot.lisp") (kill-buffer "cl-librdkafka-clos.lisp") (slime) (helm-M-x nil #("slime" 0 5 (match-part "slime"))) (slime-restart-inferior-lisp) (helm-M-x nil "slime-restart-inferior-lisp") (kill-buffer "cl-librdkafka.lisp") (slime-load-file "/home/bemcho/Projects/LispWorld/cl-librdkafka/librdkafka-clos.lisp") (kill-buffer "a.out") (kill-buffer "*SPEEDBAR*") (slime-list-callees "Conf_create") (helm-M-x nil "slime-list-callees") (slime-restart-inferior-lisp) (helm-M-x nil "slime-restart-inferior-lisp") (slime-restart-inferior-lisp) (helm-M-x nil "slime-restart-inferior-lisp") (slime-restart-inferior-lisp) (helm-M-x nil "slime-restart-inferior-lisp") (kill-buffer "package.lisp<cl-librdkafka>") (kill-buffer "librdkafka-clos.lsp") (kill-buffer "library.lisp") (kill-buffer "cl-librdkafka.asd") (kill-buffer "cl-librdkafka-clos.lisp") (kill-buffer "cl-librdkafka.lisp") (slime-restart-inferior-lisp) (helm-M-x nil "slime-restart-inferior-lisp") (slime) (helm-M-x nil "slime") (kill-some-buffers) (helm-M-x nil "kill-some-buffers") (eshell nil) (helm-M-x nil #("eshell" 0 6 (match-part "eshell"))) (magit-init "/home/bemcho/Projects/LispWorld/cl-librdkafka/") (helm-M-x nil "magit-init") (slime-restart-inferior-lisp) (helm-M-x nil "slime-restart-inferior-lisp") (slime) (helm-M-x nil "slime") (slime-load-file "/home/bemcho/Projects/LispWorld/cl-librdkafka/cl-librdkafka.lisp") (slime) (helm-M-x nil #("slime" 0 5 (match-part "slime"))) (slime-load-file "/home/bemcho/Projects/LispWorld/cl-librdkafka/cl-librdkafka.asd") (slime-load-file "/home/bemcho/Projects/LispWorld/cl-librdkafka/cl-librdkafka-clos.lisp") (slime-load-file "/home/bemcho/Projects/LispWorld/cl-librdkafka/cl-librdkafka-clos.lisp") (slime-load-file "/home/bemcho/Projects/LispWorld/cl-librdkafka/cl-librdkafka-clos.lisp") (slime) (helm-M-x nil #("slime" 0 5 (match-part "slime"))) (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil "slime") (slime-load-file "/home/bemcho/Projects/LispWorld/cl-librdkafka/cl-librdkafka-clos.lisp") (slime-repl-set-package "CL-LIBRDKAFKA") (slime-restart-inferior-lisp) (helm-M-x nil #("slime-restart-inferior-lisp" 0 27 (match-part "slime-restart-inferior-lisp"))) (msearch-mode 'toggle) (helm-M-x nil "msearch-mode") (slime-repl-set-package "CL-LIBRDKAFKA") (slime) (helm-M-x nil "slime") (kill-buffer " *cl-connection*") (slime-restart-inferior-lisp) (helm-M-x nil "slime-restart-inferior-lisp") (helm-M-x nil #("slime-lookup-reference-at-mouse" 0 31 (match-part "slime-lookup-reference-at-mouse"))) (slime-calls-who "defanonenum") (helm-M-x nil "slime-calls-who") (kill-buffer "*magit-revision: cl-kafka") (kill-buffer "*magit: cl-kafka") (magit-clone "https://github.com/yehohanan7/cl-kafka.git" "/home/bemcho/Projects/LispWorld/cl-kafka/") (helm-M-x nil "magit-clone") (magit-clone "https://github.com/yehohanan7/cl-kafka.git" "/home/bemcho/Projects/LispWorld/") (helm-M-x nil "magit-clone") (kill-buffer "chapter01.lisp") (kill-buffer "package.lisp") (kill-buffer "clml.asd") (kill-buffer "package.lisp<src>") (slime) (helm-M-x nil "slime") (package-install 'paredit nil) (helm-M-x nil #("package-install" 0 15 (match-part "package-install"))) (slime) (helm-M-x nil #("slime" 0 5 (match-part "slime"))) (package-install 'paredit nil) (helm-M-x nil "package-install") (slime-repl-return nil) (helm-M-x nil #("slime-repl-return" 0 17 (match-part "slime-repl-return"))) (slime-repl-return nil) (helm-M-x nil #("slime-repl-return" 0 17 (match-part "slime-repl-return"))) (slime-repl-return nil) (helm-M-x nil #("slime-repl-return" 0 17 (match-part "slime-repl-return"))) (slime) (helm-M-x nil "slime") (slime-reset) (helm-M-x nil "slime-reset") (slime) (helm-M-x nil "slime") (slime-repl-set-package "CHAPTER02") (slime-apropos "atomp" t nil nil) (calc nil nil 1) (helm-M-x nil "calc") (calc nil nil 1) (helm-M-x nil "calc") (kill-sexp 1) (helm-M-x nil "kill-sexp") (common-lisp-mode) (helm-M-x nil "common-lisp-mode") (other-window 1) (helm-M-x nil "other-window") (slime-repl-set-package "CHAPTER02") (slime-load-file "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/chapter02.lisp") (projectile-project-buffers-other-buffer) (helm-M-x nil "projectile-project-buffers-other-buffer") (other-window 1) (helm-M-x nil "other-window") (other-frame 1) (helm-M-x nil "other-frame") (mode-line-other-buffer) (helm-M-x nil "mode-line-other-buffer") (slime-repl-return nil) (helm-M-x nil "slime-repl-return") (slime-repl-set-package "CHAPTER01") (slime-load-file "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/chapter01.lisp") (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil #("slime" 0 5 (match-part "slime"))) (slime-repl-set-package "CHAPTER02") (slime-load-file "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/learn-you-some-lisp.asd") (slime-repl) (helm-M-x nil #("slime-repl" 0 10 (match-part "slime-repl"))) (slime) (helm-M-x nil "slime") (slime-repl) (helm-M-x nil #("slime-repl" 0 10 (match-part "slime-repl"))) (slime) (helm-M-x nil "slime") (slime-repl) (helm-M-x nil "slime-repl") (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil "slime") (slime-repl) (helm-M-x nil "slime-repl") (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil #("slime" 0 5 (match-part "slime"))) (slime-load-file "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/learn-you-some-lisp.asd") (slime-load-file "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/chapter01.lisp") (slime-repl) (helm-M-x nil #("slime-repl" 0 10 (match-part "slime-repl"))) (slime-reset) (helm-M-x nil "slime-reset") (slime-load-file "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/chapter02.lisp") (slime-load-file "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/learn-you-some-lisp.asd") (slime-load-file "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/learn-you-some-lisp.asd") (helm-M-x nil "slime-load-file") (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil "slime") (find-file "~/Projects/LispWorld/learn-you-some-lisp/src/chapter02.lisp" t) (helm-M-x nil #("find-file" 0 9 (match-part "find-file"))) (kill-some-buffers) (helm-M-x nil "kill-some-buffers") (eval-buffer) (helm-M-x nil "eval-buffer") (package-install 'projectile-speedbar nil) (helm-M-x nil #("package-install" 0 15 (match-part "package-install"))) (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil "slime") (eval-buffer) (helm-M-x nil "eval-buffer") (eval-buffer) (helm-M-x nil "eval-buffer") (table-backward-cell 1) (helm-M-x nil #("table-backward-cell" 0 19 (match-part "table-backward-cell"))) (describe-key " " 1 nil) (describe-key "" 1 nil) (slime-complete-form) (helm-M-x nil "slime-complete-form") (slime) (helm-M-x nil "slime") (describe-key "	" 1 nil) (describe-key "\257" 1 nil) (slime) (helm-M-x nil #("slime" 0 5 (match-part "slime"))) (eval-buffer) (helm-M-x nil #("eval-buffer" 0 11 (match-part "eval-buffer"))) (kill-some-buffers) (helm-M-x nil #("kill-some-buffers" 0 17 (match-part "kill-some-buffers"))) (mc/mark-all-dwim nil) (helm-M-x nil "mc/mark-all-dwim") (mc/mark-all-dwim nil) (helm-M-x nil "mc/mark-all-dwim") (mc/mark-all-dwim nil) (helm-M-x nil "mc/mark-all-dwim") (package-install 'multiple-cursors nil) (helm-M-x nil "package-install") (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil "slime") (sldb-inspect-in-frame "t)") (slime) (helm-M-x nil "slime") (helm-M-x nil #("package-install" 0 15 (match-part "package-install"))) (kill-buffer "*slime-compilation*") (kill-buffer "*sldb sbcl/4*") (slime) (helm-M-x nil #("slime" 0 5 (match-part "slime"))) (zap-to-char 1 115) (kill-buffer ".sbclrc") (slime) (helm-M-x nil "slime") (kill-buffer "*inferior-lisp*<2>") (slime) (helm-M-x nil "slime") (kill-buffer "*Customize Group: Speedbar*") (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil "slime") (kill-some-buffers) (helm-M-x nil #("kill-some-buffers" 0 17 (match-part "kill-some-buffers"))) (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil #("slime" 0 5 (match-part "slime"))) (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil #("slime" 0 5 (match-part "slime"))) (slime) (helm-M-x nil "slime") (slime) (helm-M-x nil #("slime" 0 5 (match-part "slime"))) (eshell nil) (helm-M-x nil "eshell") (slime) (helm-M-x nil "slime") (helm-M-x nil #("package-install" 0 15 (match-part "package-install"))) (slime) (helm-M-x nil #("slime" 0 5 (match-part "slime"))) (package-install 'slime-docker nil) (helm-M-x nil "package-install") (common-lisp-mode) (helm-M-x nil "common-lisp-mode") (slime) (helm-M-x nil #("slime" 0 5 (match-part "slime"))) (paredit-mode 'toggle) (helm-M-x nil #("paredit-mode" 0 12 (match-part "paredit-mode"))) (package-install 'paredit nil) (helm-M-x nil "package-install") (package-install 'slime-theme nil) (helm-M-x nil "package-install") (slime) (helm-M-x nil "slime") (eshell nil) (helm-M-x nil #("eshell" 0 6 (match-part "eshell"))) (eshell nil) (helm-M-x nil "eshell") (slime) (helm-M-x nil "slime")))
(setq irony--server-install-command-history '("cmake -DCMAKE_INSTALL_PREFIX\\=/home/bemcho/.emacs.d/irony/ /home/bemcho/.emacs.d/elpa/irony-20171110.1151/server && cmake --build . --use-stderr --config Release --target install"))
(setq buffer-name-history '(" *helm candidates:Emacs Commands*" "host-alieneval.lisp" "functions.lisp" "enum.lisp" "defboot.lisp" "cl-librdkafka-clos.lisp" "cl-librdkafka.lisp" "a.out" "*SPEEDBAR*" "a.out" "package.lisp<cl-librdkafka>" "librdkafka-clos.lsp" "library.lisp" "cl-librdkafka.asd" "cl-librdkafka-clos.lisp" "cl-librdkafka.lisp" " *cl-connection*" "*magit-revision: cl-kafka" "*magit: cl-kafka" "projects.conf" "chapter01.lisp" "package.lisp" "clml.asd" "package.lisp<src>" "chapter03" "*slime-compilation*" "*sldb sbcl/4*" ".sbclrc" "*inferior-lisp*<2>" "*Customize Group: Speedbar*" "main.cpp"))
(setq minibuffer-history '("cua-" "/home/bemcho/.sp" "ada-mode" "ada" "ada-mode" "/home/bemcho/Projects/AdaWorld/ada-v4l/src/default.adp" "/home/bemcho/Projects/AdaWorld/ada-v4l/ada-v4l.adp" "/home/bemcho/Projects/opencv-master/modules/dnn/src/layers/" "/ /home/bemcho/Projects/opencv-master/modules/dnn/src/layers/convolution_layer.cpp" " /home/bemcho/Projects/opencv-master/modules/dnn/src/layers/convolution_layer.cpp" "/home/bemcho/Projects/LispWorld/cl-kafka/src/" "cl-librdkafka" ".sp" "/home/bemcho/Projects/LispWorld/cl-librdkafka/cl-kafka.lisp" "/home/bemcho/Projects/LispWorld/cl-librdkafka/librdkafka-clos.lisp" "/home/bemcho/Projects/LispWorld/cl-librdkafka/" "/home/bemcho/Projects/LispWorld/cl-librdkafka/.gitignore" #(":void" 0 5 (fontified t face font-lock-builtin-face)) #("cl-librdkafka]..............." 0 14 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 14 15 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 15 16 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 16 17 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 17 18 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 18 19 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 19 20 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 20 21 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 21 22 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 22 23 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 23 24 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 24 25 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 25 26 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 26 27 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 27 28 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 28 29 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face))) #("librdkafka_module" 0 17 (face speedbar-file-face mouse-face speedbar-highlight-face invisible nil speedbar-text "librdkafka_module.i" help-echo dframe-help-echo speedbar-function speedbar-find-file)) "/home/bemcho/Projects/LispWorld/cl-librdkafka/librdkafka-clos.lsp" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/" "/Projects/LispWorld/lisp-koans/lisp-unit" #("2" 0 1 (face highlight-numbers-number fontified t)) "/home/bemcho/Projects/LispWorld/cl-librdkafka/" "/home/bemcho/Projects/LispWorld/cl-librdkafka/cl-librdkafka.lisp" "/home/bemcho/Projects/LispWorld/cl-librdkafka/cl-librdkafka.asd" "/home/bemcho/Projects/LispWorld/cl-librdkafka/cl-librdkafka-clos.lisp" "cl-librdkafka" "/home/bemcho/Projects/LispWorld/cl-librdkafka/cl-librdkafka-clos.lisp" #(".................................................." 0 1 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 1 2 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 2 3 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 3 4 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 4 5 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 5 6 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 6 7 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 7 8 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 8 9 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 9 10 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 10 11 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 11 12 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 12 13 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 13 14 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 14 15 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 15 16 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 16 17 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 17 18 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 18 19 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 19 20 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 20 21 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 21 22 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 22 23 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 23 24 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 24 25 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 25 26 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 26 27 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 27 28 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 28 29 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 29 30 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 30 31 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 31 32 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 32 33 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 33 34 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 34 35 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 35 36 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 36 37 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 37 38 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 38 39 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 39 40 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 40 41 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 41 42 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 42 43 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 43 44 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 44 45 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 45 46 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 46 47 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 47 48 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 48 49 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face)) 49 50 (face slime-repl-output-face slime-repl-output t rear-nonsticky (face))) "/home/bemcho/Projects/LispWorld/cl-librdkafka/cl-librdkafka-clos.lisp" "cl-librd " "cl-lib " "/home/bemcho/Projects/LispWorld/cl-librdkafka/cl-librdkafka-clos.lisp" "/home/bemcho/.sp" "cl-librdkafka" "" "/home/bemcho/Projects/LispWorld/cl-librdkafka/librdkafka_module.i" "/home/bemcho/Projects/LispWorld/cl-kafka" "https://github.com/yehohanan7/cl-kafka.git" "/home/bemcho/Projects/LispWorld/" "https://github.com/yehohanan7/cl-kafka.git" "/home/bemcho/.config/common-lisp/source-registry.conf.d/projects.conf" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/chapter02.lisp" "/home/bemcho/quicklisp/local-projects/clml/hjs/" "/home/bemcho/quicklisp/local-projects/clml/" "paredit" "pared" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/chapter03.lisp" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/chapter03" "chapter02" "atomp" "23" "12" "300" "2" "chapter02" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/chapter02.lisp" "chapter02" "" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/chapter01.lisp" "chapter02" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/learn-you-some-lisp.asd" "chapter02" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/learn-you-some-lisp.asd" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/chapter01.lisp" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/chapter02.lisp" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/learn-you-some-lisp.asd" "3" "buffer" "projectile-tog" "projec" "3" "Open" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/chapter02.lisp" "1" "C-c" #("/home/bemcho/.slime-sbcl/HyperSpecDoc/" 0 30 (fontified t face font-lock-string-face) 30 38 (fontified t face font-lock-string-face)) #("auto-completion" 0 15 (fontified t)) ".sp" "multiple-cursors" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/chapter01.lisp" "/home/bemcho/.sp" "/home/bemcho/.emacs.d/ini" "/home/bemcho/.sb" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src/" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/tests" "/home/bemcho/Projects/LispWorld/learn-you-some-lisp/src" "/home/bemcho/Projects/LispWorld/" "/home/bemcho/.spa" "/Projects/LispWorld/lisp-koans/koans/loops" "slime" "pare" "slime" "/home/bemcho/.sp" ".spa" "/home/bemcho/.spa" "/home/bemcho/.emacs.d/in" ".spa" "/home/bemcho/.spa" #("auto-completion" 0 15 (fontified t)) "slime" "the" #("autocomplete" 0 12 (fontified t)) "/home/bemcho/.emacs.d/ii" "/home/bemcho/.spa" "/home/bemcho/Projects/actor-framework/examples/composition/" "zenbu" "zen" "Warning" "buffer" "/home/bemcho/Projects/3d-scanner/source/" "zenbu" "ivy" "bemcho" "func" "slime" "A heavy one but full-featured (helm)" "The standard distribution, recommended (spacemacs)" "On the planet Emacs in the Holy control tower (emacs)"))
(setq helm-M-x-input-history '("pa" "packa" "is" "men" "show-men" "packa" "ada" " pack" "package-del" #("Put_Line" 0 1 (fontified t) 1 8 (fontified t)) "package-re" "ada" "pa" "ada" "a" "ada-mo" "men" "show-too" "ada" "kill" "slime" "e" "eval" "spee" "slime" "kill" "slime" "sli" "slei" "slime" "sl" "slime-ca" "slime" "sl" "slime-re" "slime" "kill-" "es" "magit-i" "sli" "sl" "slime" "rest" "mse" "slime" "slime-restart" "slime-" "slime-c" #("value" 0 5 (rear-nonsticky (face) face slime-repl-result-face)) "mag" "slime" "pa" "slime" "pack" "slime-repl" "slime" "calc" "sexp" "comm" "other-wi" "other-bu" "other-w" "oth" "mode-line" "slime-repl-r" "slime" "slime-re" "slime" "slime-repl" "slime" "helm-mo" "slime-repl" "slime" "s" "slime-repl" "slime" "slime-rep" "slime-res" "slime-loa" "slime" "find" "kill" "ev" " pack" "slime" "eva" "tabbar" "slime-comp" #("set-up-slime-ac" 0 15 (fontified t)) "slime" "eva" "kill" #("print-char-recurr-recurm" 0 23 (fontified t face font-lock-function-name-face) 23 24 (fontified t face font-lock-function-name-face)) #("print-dots-recur" 0 16 (fontified t)) "mark-all-" "pack" "slime" "sl" "slime" "pa" "lime" "slime" #("src/" 0 4 (fontified t face font-lock-string-face)) "slime" "kill-bu" "slime" "eshell" "slime" "pack" "slime" "pack" "common" "slime" "paredit" "pac" "slime" "eshell" "slime" "eshell" "slime" "pack" "slime" "eshell" #("au" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face) 1 2 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face)) "irony-mode" "eshell" "irony-insta" "auto" "slime" "mse" "sli" #("const" 0 5 (fontified t face font-lock-keyword-face)) "mse" #("flowPoint" 0 9 (fontified t face font-lock-function-name-face)) "pac" "mse" " T n" "pack" "pa" "package-refre" "pa" "configuration-layer/create-layer" "To" "slime" "pack"))
(setq evil-jumps-history '((20588 "/home/bemcho/.spacemacs") (103 "/home/bemcho/Projects/AdaWorld/ada-v4l/src/main.adb") (127 "/home/bemcho/Projects/AdaWorld/ada-v4l/ada-v4l.gpr") (170 "/home/bemcho/Projects/AdaWorld/ada-v4l/adav4l.gpr") (144 "/home/bemcho/Projects/AdaWorld/ada-v4l/src/main.adb") (21165 "/home/bemcho/.spacemacs") (21163 "/home/bemcho/.spacemacs") (1 "/home/bemcho/.spacemacs") (414 "/home/bemcho/Projects/AdaWorld/ada-v4l/src/main.adb") (414 "/home/bemcho/Projects/AdaWorld/ada-v4l/src/main.adb") (432 "/home/bemcho/Projects/AdaWorld/ada-v4l/src/main.adb") (505 "/home/bemcho/Projects/AdaWorld/ada-v4l/src/main.adb") (199 "/home/bemcho/Projects/AdaWorld/ada-v4l/src/main.adb") (1 "/home/bemcho/Downloads/gnat-gpl-2017-x86_64-linux-bin/doinstall")))
(setq mark-ring 'nil)
(setq search-ring '("helm" "except" "exexceptissss" "conf" "consumer-start" "commit-sync" "conf_get" "event_type" "partitionercb" "partitionercbpartitionercbpartitionercbpartitionercb" "(partitionerkeypointercb_partitioner_cb" "set" "create_conf" "produce" "_get" "consumer"))
(setq regexp-search-ring '("etomov"))
(setq extended-command-history '("package-install" "menu-bar-mode" "menu-bar-showhide-tool-bar-menu-customize-enable-top" "ada-mode-version" "package-delete" "ada-mode" "kill-some-buffers" "slime" "speedbar" "slime-restart-inferior-lisp" "slime-list-callees" "eshell" "magit-init" "msearch-mode" "slime-calls-who" "magit-clone" "slime-reset" "calc" "kill-sexp" "common-lisp-mode" "other-window" "projectile-project-buffers-other-buffer" "other-frame" "mode-line-other-buffer" "slime-load-file" "find-file" "eval-buffer" "mc/mark-all-dwim" "auto-complete" "plain-TeX-mode" "package-refresh-contents" "configuration-layer/create-layer"))
